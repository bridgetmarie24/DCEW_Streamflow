dis_full[[sub$ID[i]]] <- dis # store discharge output in a list
q_vals$q[i] <- dis$q
q_vals$ID[i] <- sub$ID[i]
q_vals$Date[i] <- sub$Date[i]
}
View(q_vals)
for (i in 1:length(sub$ID)){
sub_field <- subset(sub, ID == sub$ID[i]) #subset the original csv
mass <- sub_field$NaBr_g[1] # grab the mass of the salt
df <- df_field[[sub$ID[i]]] # get the correct df from list of dataframes
dis <- discharge(df = df, mass = mass) # run discharge function
dis_full[[sub$ID[i]]] <- dis # store discharge output in a list
q_vals$q[i] <- dis$q
q_vals$ID[i] <- sub$ID[i]
q_vals$Date[i] <- sub$Date[i]
q_vals$Area[i] <- dis$area
}
write.csv(q_vals, out_path)
# Export the discharge dataframe
out_path <- paste('~/Desktop/Field Methods/Data/q_vals.csv')
write.csv(q_vals, out_path)
# Import packages ####
library(dplyr)
library(Matrix) # Gets tidyverse to import
library(tidyverse) # data manipulation
library(ggplot2)
field <- read.csv('~/Desktop/Field Methods/Data/Streamflow_Data.csv')
field$Date <- as.Date(field$Date)
# This function will import the .dat file and only take the necessary data between start
# and end time points
dat_file <- function (file.path, start.time, end.time) {
df <- read.delim(file.path, header = T, sep = ',', skip = 1)
df <- df[-c(1,2),]
str(df) # This is used to check the datatype of each column
df$Time <- as.POSIXct(df$TIMESTAMP) # makes TIMESTAMP column in date/time format
df$Cond <- as.numeric(df$Cond)
df$Temp <- as.numeric(df$PTemp_C)
df <- df[,c('Time', 'Cond', 'Temp')]
df <- subset(df, Time > start.time & Time < end.time) # crop data to start and end time
return(df)
}
day3 <- subset(field, Date == '2023-03-10') # deal with data all in one file
day3 <- subset(day3, Site_Name != 'MidMain1') # bad data, need to not use this
# Creat a list to store the dataframes for day 3
df_field <- list()
for (i in 1:length(day3$Date)) {
name <- day3$ID[i] # create unique name for list
print(name)
# Import the data and clip to start and end time
file <- dat_file('~/Desktop/Field Methods/FieldData/everything_2023.dat',
start.time = paste(as.character(day3$Date[i]), day3$Start_time[i], sep = ' '),
end.time = paste(as.character(day3$Date[i]), day3$End_time[i], sep = ' '))
# Visualize to make sure you have full time extent
print(ggplot(data = file, aes(x = Time, y = Cond)) +
geom_point() +
geom_line() +
ggtitle(name))
#Save to list
df_field[[name]] <- file
}
# Missing LowMain 2 from field day 1
field_sub <- subset(field, ID != '022423_LowMain_2' & Date != '2023-03-10')
for (i in 1:length(field_sub$Date)) {
name <- field_sub$ID[i] # create unique name for list
file_name <- paste('~/Desktop/Field Methods/FieldData/', field_sub$ID[i], '.dat', sep = '')
# Import the data and clip to start and end time
file <- dat_file(file_name,
start.time = paste(as.character(field_sub$Date[i]), field_sub$Start_time[i], sep = ' '),
end.time = paste(as.character(field_sub$Date[i]), field_sub$End_time[i], sep = ' '))
# Visualize to make sure you have full time extent
print(ggplot(data = file, aes(x = Time, y = Cond)) +
geom_point() +
geom_line() +
ggtitle(name))
#Save to list
df_field[[name]] <- file
}
discharge <- function (df, mass){
# Take the first and last 5 values of the dataframe to compare beginning and end background
interp <- rbind(head(df, 5), tail(df,5))
# If there is a difference between beginning and end background,
# fit a linear regression to subtract out the background
if (as.numeric(mean(head(df$Cond, 5))- mean(tail(df$Cond, 5))) > 0.015 ){
reg <- lm(Cond ~ Time, data = interp) #Fit a linear regression between date/time and cond
df$pred <- predict(reg, newdata = data.frame(Time = df$Time)) # predict the regression
df$dif <- df$Cond - df$pred # calculate the difference in conductivity
df$dif[df$dif < 0] <- 0 # replace any negative values with 0
}
# If there is no difference in background between beginning and end,
# Use the mean background conductivity to get rid of background
else {
df$dif <- df$Cond- mean(interp$Cond) # subtract the mean background value from the conductivity
df$dif[df$dif < 0] <- 0# replace any negative values with 0
}
# store the dataframe
ret <- list(data = df)
# Plot again , will look the same but shifted down so background conductivity is gone
ret$plt<- ggplot(data = df, aes(x = Time, y = dif)) +
geom_point() +
geom_line()
# Take the area under the curve
time <- df[['Time']] # pull time column
df$step <- 1:length(df$Time)*2 # create the time step
cond <- df[['dif']] * 1000 # converts from mS/cm to um/cm
area = trapz(df$step, cond) # integrate using trapezoidal method
ret$area <- area # store area in output
# Use area under the curve and equation to get streamflow
# Equation #
# -------- #
# Q = M/(K*A)
# K value: specific conductivity for the salt of the slug injection in the water you are using
# relationship between specific conductance and concentration
# Q : calculated discharge (L/s)
# M : Mass of salt used (mg)
# A : The area
k = 0.756
m = mass * 1000
t = 2
ret$q <- m/(area*k*t)
return(ret)
}
# Missing lowmain2 from day one so remove from field dataframe and remove MidMain1 from last day
sub <- subset(field, !(ID %in% c('022423_LowMain_2', '031023_Midmain_1' )))
# Creating a list to store discharge
dis_full <- list() #creating a list to store discharge
q_vals <- data.frame(q = 1:length(sub$Date)) # dataframe for q values
for (i in 1:length(sub$ID)){
sub_field <- subset(sub, ID == sub$ID[i]) #subset the original csv
mass <- sub_field$NaBr_g[1] # grab the mass of the salt
df <- df_field[[sub$ID[i]]] # get the correct df from list of dataframes
dis <- discharge(df = df, mass = mass) # run discharge function
dis_full[[sub$ID[i]]] <- dis # store discharge output in a list
q_vals$q[i] <- dis$q
q_vals$ID[i] <- sub$ID[i]
q_vals$Date[i] <- sub$Date[i]
q_vals$Area[i] <- dis$area
}
# Export the dataframe ####
out_path <- paste('~/Desktop/Field Methods/Data/q_vals.csv')
write.csv(q_vals, out_path)
View(q_vals)
# Creating a list to store discharge
dis_full <- list() #creating a list to store discharge
q_vals <- data.frame(q = 1:length(sub$Date),
Date = as.Date()) # dataframe for q values
for (i in 1:length(sub$ID)){
sub_field <- subset(sub, ID == sub$ID[i]) #subset the original csv
mass <- sub_field$NaBr_g[1] # grab the mass of the salt
df <- df_field[[sub$ID[i]]] # get the correct df from list of dataframes
dis <- discharge(df = df, mass = mass) # run discharge function
dis_full[[sub$ID[i]]] <- dis # store discharge output in a list
q_vals$q[i] <- dis$q
q_vals$ID[i] <- sub$ID[i]
q_vals$Date[i] <- as.Date(sub$Date[i])
q_vals$Area[i] <- dis$area
}
View(q_vals)
for (i in 1:length(sub$ID)){
sub_field <- subset(sub, ID == sub$ID[i]) #subset the original csv
mass <- sub_field$NaBr_g[1] # grab the mass of the salt
df <- df_field[[sub$ID[i]]] # get the correct df from list of dataframes
dis <- discharge(df = df, mass = mass) # run discharge function
dis_full[[sub$ID[i]]] <- dis # store discharge output in a list
q_vals$q[i] <- dis$q
q_vals$ID[i] <- sub$ID[i]
q_vals$Date[i] <- as.character(sub$Date[i])
q_vals$Area[i] <- dis$area
}
# Export the dataframe ####
out_path <- paste('~/Desktop/Field Methods/Data/q_vals.csv')
write.csv(q_vals, out_path)
# Import the data ####
q <- read.csv('~/Desktop/Field Methods/Data/q_vals.csv')
# Import packages ####
library(dplyr)
library(Matrix) # Gets tidyverse to import
library(tidyverse) # data manipulation
function (description = "", open = "", blocking = TRUE, encoding = getOption("encoding"),
raw = FALSE, method = getOption("url.method", "default"))
library(ggplot2)
# Import the data ####
q <- read.csv('~/Desktop/Field Methods/Data/q_vals.csv')
View(q)
ks.test(q$q)
# Check for normality ####
shapiro.test(q$q)
# Check for normality ####
hist(q$q)
shapiro.test(q$q)
q$Date <- as.Date(q$Date)
View(q)
# Import the data ####
q <- read.csv('~/Desktop/Field Methods/Data/q_vals.csv')
field <- read.csv('~/Desktop/Field Methods/Data/Streamflow_Data.csv')
field <- read.csv('~/Desktop/Field Methods/Data/Streamflow_Data.csv')
field$Date <- as.Date(field$Date)
# This function will import the .dat file and only take the necessary data between start
# and end time points
dat_file <- function (file.path, start.time, end.time) {
df <- read.delim(file.path, header = T, sep = ',', skip = 1)
df <- df[-c(1,2),]
str(df) # This is used to check the datatype of each column
df$Time <- as.POSIXct(df$TIMESTAMP) # makes TIMESTAMP column in date/time format
df$Cond <- as.numeric(df$Cond)
df$Temp <- as.numeric(df$PTemp_C)
df <- df[,c('Time', 'Cond', 'Temp')]
df <- subset(df, Time > start.time & Time < end.time) # crop data to start and end time
return(df)
}
day3 <- subset(field, Date == '2023-03-10') # deal with data all in one file
day3 <- subset(day3, Site_Name != 'MidMain1') # bad data, need to not use this
# Creat a list to store the dataframes for day 3
df_field <- list()
for (i in 1:length(day3$Date)) {
name <- day3$ID[i] # create unique name for list
print(name)
# Import the data and clip to start and end time
file <- dat_file('~/Desktop/Field Methods/FieldData/everything_2023.dat',
start.time = paste(as.character(day3$Date[i]), day3$Start_time[i], sep = ' '),
end.time = paste(as.character(day3$Date[i]), day3$End_time[i], sep = ' '))
# Visualize to make sure you have full time extent
print(ggplot(data = file, aes(x = Time, y = Cond)) +
geom_point() +
geom_line() +
ggtitle(name))
#Save to list
df_field[[name]] <- file
}
# Missing LowMain 2 from field day 1
field_sub <- subset(field, ID != '022423_LowMain_2' & Date != '2023-03-10')
for (i in 1:length(field_sub$Date)) {
name <- field_sub$ID[i] # create unique name for list
file_name <- paste('~/Desktop/Field Methods/FieldData/', field_sub$ID[i], '.dat', sep = '')
# Import the data and clip to start and end time
file <- dat_file(file_name,
start.time = paste(as.character(field_sub$Date[i]), field_sub$Start_time[i], sep = ' '),
end.time = paste(as.character(field_sub$Date[i]), field_sub$End_time[i], sep = ' '))
# Visualize to make sure you have full time extent
print(ggplot(data = file, aes(x = Time, y = Cond)) +
geom_point() +
geom_line() +
ggtitle(name))
#Save to list
df_field[[name]] <- file
}
discharge <- function (df, mass){
# Take the first and last 5 values of the dataframe to compare beginning and end background
interp <- rbind(head(df, 5), tail(df,5))
# If there is a difference between beginning and end background,
# fit a linear regression to subtract out the background
if (as.numeric(mean(head(df$Cond, 5))- mean(tail(df$Cond, 5))) > 0.015 ){
reg <- lm(Cond ~ Time, data = interp) #Fit a linear regression between date/time and cond
df$pred <- predict(reg, newdata = data.frame(Time = df$Time)) # predict the regression
df$dif <- df$Cond - df$pred # calculate the difference in conductivity
df$dif[df$dif < 0] <- 0 # replace any negative values with 0
}
# If there is no difference in background between beginning and end,
# Use the mean background conductivity to get rid of background
else {
df$dif <- df$Cond- mean(interp$Cond) # subtract the mean background value from the conductivity
df$dif[df$dif < 0] <- 0# replace any negative values with 0
}
# store the dataframe
ret <- list(data = df)
# Plot again , will look the same but shifted down so background conductivity is gone
ret$plt<- ggplot(data = df, aes(x = Time, y = dif)) +
geom_point() +
geom_line()
# Take the area under the curve
time <- df[['Time']] # pull time column
df$step <- 1:length(df$Time)*2 # create the time step
cond <- df[['dif']] * 1000 # converts from mS/cm to um/cm
area = trapz(df$step, cond) # integrate using trapezoidal method
ret$area <- area # store area in output
# Use area under the curve and equation to get streamflow
# Equation #
# -------- #
# Q = M/(K*A)
# K value: specific conductivity for the salt of the slug injection in the water you are using
# relationship between specific conductance and concentration
# Q : calculated discharge (L/s)
# M : Mass of salt used (mg)
# A : The area
k = 0.756
m = mass * 1000
t = 2
ret$q <- m/(area*k*t)
return(ret)
}
# Missing lowmain2 from day one so remove from field dataframe and remove MidMain1 from last day
sub <- subset(field, !(ID %in% c('022423_LowMain_2', '031023_Midmain_1' )))
# Creating a list to store discharge
dis_full <- list() #creating a list to store discharge
q_vals <- data.frame(q = 1:length(sub$Date)) # dataframe for q values
for (i in 1:length(sub$ID)){
sub_field <- subset(sub, ID == sub$ID[i]) #subset the original csv
mass <- sub_field$NaBr_g[1] # grab the mass of the salt
df <- df_field[[sub$ID[i]]] # get the correct df from list of dataframes
dis <- discharge(df = df, mass = mass) # run discharge function
dis_full[[sub$ID[i]]] <- dis # store discharge output in a list
q_vals$q[i] <- dis$q
q_vals$ID[i] <- sub$ID[i]
q_vals$Date[i] <- as.character(sub$Date[i])
q_vals$Area[i] <- dis$area
}
for (i in 1:length(sub$ID)){
sub_field <- subset(sub, ID == sub$ID[i]) #subset the original csv
mass <- sub_field$NaBr_g[1] # grab the mass of the salt
df <- df_field[[sub$ID[i]]] # get the correct df from list of dataframes
dis <- discharge(df = df, mass = mass) # run discharge function
dis_full[[sub$ID[i]]] <- dis # store discharge output in a list
q_vals$q[i] <- dis$q
q_vals$ID[i] <- sub$ID[i]
q_vals$Date[i] <- as.character(sub$Date[i])
q_vals$Area[i] <- dis$area
q_vals$uaa[i] <- sub$UAA[i]
}
# Export the dataframe ####
out_path <- paste('~/Desktop/Field Methods/Data/q_vals.csv')
write.csv(q_vals, out_path)
# Import the data ####
q <- read.csv('~/Desktop/Field Methods/Data/q_vals.csv')
q$Date <- as.Date(q$Date)
# Check for normality ####
hist(q$q)
shapiro.test(q$q)
# Linear regression ####
mod <- lm(q ~ uaa, data = q)
summary(mod)
# Import the data ####
q_vals <- read.csv('~/Desktop/Field Methods/Data/q_vals.csv')
q$Date <- as.Date(q$Date)
# Check for normality ####
hist(q_vals$q)
shapiro.test(q_vals$q)
# Linear regression ####
mod <- lm(q ~ uaa, data = q_vals)
summary(mod)
# Visualize the regression ####
ggplot(data = q_vals)
# Visualize the regression ####
ggplot(data = q_vals, aes(x = uaa, y = q)) +
geom_point() +
geom_smooth()
# Visualize the regression ####
ggplot(data = q_vals, aes(x = uaa, y = q)) +
geom_point() +
geom_smooth(method = 'lm')
# Visualize the regression ####
reg <- ggplot(data = q_vals, aes(x = uaa, y = q)) +
geom_point() +
geom_smooth(method = 'lm') +
theme_bw() +
ylab('Discharge (L/s)') +
xlab('Upslope Accumulated Area (km^2)')
reg
# Visualize the regression ####
reg <- ggplot(data = q_vals, aes(x = uaa, y = q)) +
geom_point() +
geom_smooth(method = 'lm', fill = 'black', color = 'black') +
theme_bw() +
ylab('Discharge (L/s)') +
xlab('Upslope Accumulated Area (km^2)')
reg
# Visualize the regression ####
reg <- ggplot(data = q_vals, aes(x = uaa, y = q)) +
geom_point() +
stat_poly_line( fill = 'black', color = 'black') +
theme_bw() +
ylab('Discharge (L/s)') +
xlab('Upslope Accumulated Area (km^2)')
method = 'lm',
# Visualize the regression ####
reg <- ggplot(data = q_vals, aes(x = uaa, y = q)) +
geom_point() +
geom_smooth(method = 'lm', fill = 'black', color = 'black') +
theme_bw() +
ylab('Discharge (L/s)') +
xlab('Upslope Accumulated Area (km^2)')
reg
# Visualize the regression ####
reg <- ggplot(data = q_vals, aes(x = uaa, y = q)) +
geom_point() +
geom_smooth(method = 'lm', fill = 'black', color = 'black') +
theme_bw() +
ylab('Discharge (L/s)') +
xlab('Upslope Accumulated Area (km^2)') +
geom_text(x=26,y=30,label=lm_eqn(q_vals, 'q','uaa'), ,parse=T)
summary(mod)
# Visualize the regression ####
reg <- ggplot(data = q_vals, aes(x = uaa, y = q)) +
geom_point() +
geom_smooth(method = 'lm', fill = 'black', color = 'black') +
theme_bw() +
ylab('Discharge (L/s)') +
xlab('Upslope Accumulated Area (km^2)') +
geom_text(x=26,y=30,label= 'R2 = 0.11', ,parse=T)
reg
# Visualize the regression ####
reg <- ggplot(data = q_vals, aes(x = uaa, y = q)) +
geom_point() +
geom_smooth(method = 'lm', fill = 'black', color = 'black') +
theme_bw() +
ylab('Discharge (L/s)') +
xlab('Upslope Accumulated Area (km^2)') +
geom_text(x=26.15,y=30,label= 'R2 = 0.11', ,parse=T)
reg
# Visualize the regression ####
reg <- ggplot(data = q_vals, aes(x = uaa, y = q)) +
geom_point() +
geom_smooth(method = 'lm', fill = 'black', color = 'black') +
theme_bw() +
ylab('Discharge (L/s)') +
xlab('Upslope Accumulated Area (km^2)') +
geom_text(x=26.15,y=30, 'R2 = 0.11', ,parse=T)
reg
# Visualize the regression ####
reg <- ggplot(data = q_vals, aes(x = uaa, y = q)) +
geom_point() +
geom_smooth(method = 'lm', fill = 'black', color = 'black') +
theme_bw() +
ylab('Discharge (L/s)') +
xlab('Upslope Accumulated Area (km^2)') +
geom_text(x=26.15,y=30, label = 'R2 = 0.11')
reg
# Visualize the regression ####
reg <- ggplot(data = q_vals, aes(x = uaa, y = q)) +
geom_point() +
geom_smooth(method = 'lm', fill = 'grey', color = 'black') +
theme_bw() +
ylab('Discharge (L/s)') +
xlab('Upslope Accumulated Area (km^2)') +
geom_text(x=26.15,y=30, label = 'R2 = 0.11')
reg
ggsave('~/Desktop/Field Methods/Figures/regress.png',
plot = reg,
width = 4,
height = 4)
# Visualize the regression ####
reg <- ggplot(data = q_vals, aes(x = uaa, y = q, fill = Date)) +
geom_point() +
geom_smooth(method = 'lm', fill = 'grey', color = 'black') +
theme_bw() +
ylab('Discharge (L/s)') +
xlab('Upslope Accumulated Area (km^2)') +
geom_text(x=26.15,y=30, label = 'R2 = 0.11')
ggsave('~/Desktop/Field Methods/Figures/regress.png',
plot = reg,
width = 4,
height = 4)
reg
# Visualize the regression ####
reg <- ggplot(data = q_vals, aes(x = uaa, y = q, fill = as.character(Date))) +
geom_point() +
geom_smooth(method = 'lm', fill = 'grey', color = 'black') +
theme_bw() +
ylab('Discharge (L/s)') +
xlab('Upslope Accumulated Area (km^2)') +
geom_text(x=26.15,y=30, label = 'R2 = 0.11')
reg
# Visualize the regression ####
reg <- ggplot(data = q_vals, aes(x = uaa, y = q, fill = as.character(Date))) +
geom_point() +
geom_smooth(method = 'lm') +
theme_bw() +
ylab('Discharge (L/s)') +
xlab('Upslope Accumulated Area (km^2)') +
geom_text(x=26.15,y=30, label = 'R2 = 0.11')
reg
# Visualize the regression ####
reg <- ggplot(data = q_vals, aes(x = uaa, y = q)) +
geom_point() +
geom_smooth(method = 'lm', fill = 'grey', color = 'black') +
theme_bw() +
ylab('Discharge (L/s)') +
xlab('Upslope Accumulated Area (km^2)') +
geom_text(x=26.15,y=30, label = 'R2 = 0.11')
reg
ggsave('~/Desktop/Field Methods/Figures/regress.png',
plot = reg,
width = 4,
height = 4)
# Visualize regression for individual weeks ####
reg <- ggplot(data = q_vals, aes(x = uaa, y = q, color = as.character(Date), fill = as.character('Date'))) +
geom_point() +
geom_smooth(method = 'lm') +
theme_bw() +
ylab('Discharge (L/s)') +
xlab('Upslope Accumulated Area (km^2)') +
geom_text(x=26.15,y=30, label = 'R2 = 0.11')
reg
# Visualize regression for individual weeks ####
reg <- ggplot(data = q_vals, aes(x = uaa, y = q, color = as.character(Date))) +
geom_point() +
geom_smooth(method = 'lm') +
theme_bw() +
ylab('Discharge (L/s)') +
xlab('Upslope Accumulated Area (km^2)') +
geom_text(x=26.15,y=30, label = 'R2 = 0.11')
reg
# Visualize regression for individual weeks ####
reg <- ggplot(data = q_vals, aes(x = uaa, y = q, color = as.character(Date))) +
geom_point() +
geom_smooth(method = 'lm') +
theme_bw() +
ylab('Discharge (L/s)') +
xlab('Upslope Accumulated Area (km^2)')
reg
ggsave('~/Desktop/Field Methods/Figures/ind_reg.svg',
plot = reg,
width = 6.5,
height = 4)
